name: 'Build Java'
description: 'Action to build Java project, upload Maven artefact and upload docker image'
inputs:
  appName:
    description: 'Name of the application'
  awsRegion:
    description: 'AWS Region for ECR'
    required: false
    default: us-west-2
  pomVersion:
    description: 'Pom version to apply to maven artefact'
    required: false
    default: ${{ github.sha }}
  dockerTag:
    description: 'Docker tag to apply to docker image'
    required: false
    default: ${{ github.sha }}
  versionTag:
    description: 'Version tag to apply to docker image'
    required: false
  mavenS3AccessKeyId:
    description: 'Maven S3 Access Key Id to upload artefact'
  mavenS3SecretAccessKey:
    description: 'Maven S3 Secret Access Key to upload artefact'
  sonarUrl:
    description: 'URL to Sonar Server'
  sonarToken:
    description: 'Sonar token'
  jasperBuild:
    description: 'Flag for jasper build'
    required: false
  token:
    description: 'Personal access token with auth for the jasper-report repository'
    required: true

runs:
  using: composite

  steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-go@v3
      with:
        go-version: '^1.19.4'

    - uses: imjasonh/setup-crane@v0.2
      with:
        version: v0.12.1

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Cache local Maven repository
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Update pom version
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.mavenS3AccessKeyId }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.mavenS3SecretAccessKey }}
      shell: bash
      run: mvn versions:set -DnewVersion="${{ inputs.pomVersion }}"

    - uses: actions/checkout@v3
      if: ${{ inputs.jasperBuild == 'true' }}
      with:
        repository: cartoncloud/jasper-report
        ref: refs/heads/main
        path: jasper-report
        token: ${{ inputs.token }}

    - uses: actions/checkout@v3
      if: ${{ inputs.jasperBuild != 'true' }}
      with:
        fetch-depth: 0

    - name: Jasper Report Steps
      if: ${{ inputs.jasperBuild == 'true' }}
      shell: bash
      run: |
        rm jasper/*.jasper
        rm src/main/resources/ratecardreport.properties
        cp jasper-report/jasper/*.jrxml jasper-compile
        cp jasper-report/ratecardreport.properties src/main/resources        

    - name: Build project
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.mavenS3AccessKeyId }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.mavenS3SecretAccessKey }}
      shell: bash
      run: mvn -Dmaven.wagon.http.pool=false -s settings.xml -B clean deploy

    - name: Run Sonar
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.mavenS3AccessKeyId }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.mavenS3SecretAccessKey }}
      shell: bash
      run: mvn sonar:sonar -Dsonar.host.url=${{ inputs.sonarUrl }} -Dsonar.login=${{ inputs.sonarToken }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: arn:aws:iam::026388519853:role/GithubToAwsOpenIdConnect
        aws-region: ${{ inputs.awsRegion }}

    - name: Docker login
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and tag docker image
      shell: bash
      env:
        REGISTRY: 026388519853.dkr.ecr.us-west-2.amazonaws.com
        REPOSITORY: ${{ inputs.appName }}
        IMAGE_TAG: ${{ inputs.dockerTag }}
      run: |
        docker buildx create --name multiplatform-builder --driver docker-container --bootstrap
        docker buildx use multiplatform-builder
        docker buildx build --platform linux/amd64,linux/arm64 --tag $REGISTRY/$REPOSITORY:"$IMAGE_TAG" --build-arg jar_file=./target/${{ inputs.appName }}-${{ inputs.pomVersion }}.jar --push .
        amdSha=$(crane digest $REGISTRY/$REPOSITORY:"$IMAGE_TAG" --platform linux/amd64)
        armSha=$(crane digest $REGISTRY/$REPOSITORY:"$IMAGE_TAG" --platform linux/arm64)
        crane tag $REGISTRY/$REPOSITORY@"$amdSha" "$IMAGE_TAG"-amd64
        crane tag $REGISTRY/$REPOSITORY@"$armSha" "$IMAGE_TAG"-arm64

    - name: Tag docker image with latest for pushes on main branch
      if: ${{ github.ref_name == 'main' }}
      shell: bash
      env:
        REGISTRY: 026388519853.dkr.ecr.us-west-2.amazonaws.com
        REPOSITORY: ${{ inputs.appName }}
        IMAGE_TAG: ${{ inputs.dockerTag }}
      run: crane tag $REGISTRY/$REPOSITORY:"$IMAGE_TAG" latest

    - name: Tag image with version tag if present
      if: inputs.versionTag != ''
      shell: bash
      env:
        REGISTRY: 026388519853.dkr.ecr.us-west-2.amazonaws.com
        REPOSITORY: ${{ inputs.appName }}
        IMAGE_TAG: ${{ inputs.dockerTag }}
      run: crane tag $REGISTRY/$REPOSITORY:"$IMAGE_TAG" ${{ inputs.versionTag }}
