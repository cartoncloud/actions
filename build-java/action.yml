name: 'Build Java'
description: 'Action to build Java project, upload Maven artefact and upload docker image'
inputs:
  appName:
    description: 'Name of the application'
  awsRegion:
    description: 'AWS Region for ECR'
    required: false
    default: us-west-2
  pomVersion:
    description: 'Pom version to apply to maven artefact'
    required: false
    default: ${{ github.sha }}
  dockerTag:
    description: 'Docker tag to apply to docker image'
    required: false
    default: ${{ github.sha }}
  versionTag:
    description: 'Version tag to apply to docker image'
    required: false
  githubRefName:
    description: 'Github ref name'
    required: false
  mavenS3AccessKeyId:
    description: 'Maven S3 Access Key Id to upload artefact'
  mavenS3SecretAccessKey:
    description: 'Maven S3 Secret Access Key to upload artefact'
  sonarUrl:
    description: 'URL to Sonar Server'
  sonarToken:
    description: 'Sonar token'

runs:
  using: composite

  steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: 'maven'

    - name: Update pom version
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.mavenS3AccessKeyId }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.mavenS3SecretAccessKey }}
      shell: bash
      run: mvn versions:set -DnewVersion="${{ inputs.pomVersion }}"

    - name: Build project
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.mavenS3AccessKeyId }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.mavenS3SecretAccessKey }}
      shell: bash
      run: mvn -Dmaven.wagon.http.pool=false -s settings.xml -B clean deploy

    - name: Run Sonar
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.mavenS3AccessKeyId }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.mavenS3SecretAccessKey }}
      shell: bash
      run:  mvn sonar:sonar -Dsonar.host.url=${{ inputs.sonarUrl }} -Dsonar.login=${{ inputs.sonarToken }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@master
      with:
        role-to-assume: arn:aws:iam::026388519853:role/GithubToAwsOpenIdConnect
        aws-region: ${{ inputs.awsRegion }}

    - name: Docker login
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and tag docker image
      shell: bash
      env:
        REGISTRY: 026388519853.dkr.ecr.us-west-2.amazonaws.com
        REPOSITORY: ${{ inputs.appName }}
        IMAGE_TAG: ${{ inputs.dockerTag }}
      run: |
        docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG --build-arg jar_file=./target/${{ inputs.appName }}-${{ inputs.pomVersion }}.jar .

    - name: Tag docker image with latest for pushes on main branch
      if: ${{ inputs.githubRefName == 'main' }}
      shell: bash
      env:
        REGISTRY: 026388519853.dkr.ecr.us-west-2.amazonaws.com
        REPOSITORY: ${{ inputs.appName }}
        IMAGE_TAG: ${{ inputs.dockerTag }}
      run: |
        docker tag $REGISTRY/$REPOSITORY:$IMAGE_TAG $REGISTRY/$REPOSITORY:latest

    - name: Tag image with version tag if present
      if: inputs.versionTag != ''
      shell: bash
      env:
        REGISTRY: 026388519853.dkr.ecr.us-west-2.amazonaws.com
        REPOSITORY: ${{ inputs.appName }}
        IMAGE_TAG: ${{ inputs.dockerTag }}
      run: |
        docker tag $REGISTRY/$REPOSITORY:$IMAGE_TAG $REGISTRY/$REPOSITORY:${{ inputs.versionTag }}

    - name: Push docker image to Amazon ECR
      shell: bash
      env:
        REGISTRY: 026388519853.dkr.ecr.us-west-2.amazonaws.com
        REPOSITORY: ${{ inputs.appName }}
      run: |
        docker push $REGISTRY/$REPOSITORY --all-tags