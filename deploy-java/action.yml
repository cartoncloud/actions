name: 'Deploy Java'
description: 'Deploy Java service to AWS'
inputs:
  slackChannel:
    description: 'Slack channel to post in'
    required: false
  appName:
    description: 'Name of the app and matching project field'
    required: true
  revision:
    description: 'Version of the app that is being deployed'
    required: true
  revisionUrl:
    description: 'Url to the version of the app that is being deployed'
    required: true
  releaseNotes:
    description: 'Optional release notes to add to the started Slack message'
    required: false
  reason:
    description: 'Optional reason for deployment to add to the started Slack message'
    required: false
  environment:
    description: 'Name of the environment that is being deployed to'
    required: true
  environmentUrl:
    description: 'Url of the environment that is being deployed to'
    required: true
  existingImageTag:
    description: 'Tag of existing docker image'
    required: true
  environmentTag:
    description: 'Docker environment tag to apply to docker image'
    required: true
  clusterName:
    description: 'Name of ECS cluster'
    required: false
    default: ''
  versionTag:
    description: 'Version tag to apply to docker image'
    required: false
  awsRegion:
    description: 'AWS region to deploy to'
    required: true
  slackBotToken:
    description: 'Slack token of custom app for sending messages'
    required: false
  jiraServer:
    description: 'Jira server address i.e. acme.atlassian.net'
    required: true
  jiraUsername:
    description: 'Jira username to use to call the API'
    required: true
  jiraPassword:
    description: 'Jira password to use to call the API'
    required: true
  gitHubPAT:
    description: 'PAT for GitHub API calls'
    required: false
  roleToAssumeForEcr:
    description: 'AWS Role to Assume for access to ECR'
    required: false
  roleToAssumeForCluster:
    description: 'AWS Role to Assume for access to Cluster'
    required: false

runs:
  using: "composite"

  steps:
    - uses: actions/checkout@v3

    - name: Slack notification (release notes)
      uses: slackapi/slack-github-action@v1.23.0
      if: inputs.slackChannel != '' && inputs.slackBotToken != '' && inputs.releaseNotes != ''
      env:
        SLACK_BOT_TOKEN: ${{ inputs.slackBotToken }}
      with:
        channel-id: ${{ inputs.slackChannel }}
        payload: ${{ inputs.releaseNotes }}

    - name: Slack deployment status (started)
      uses: cartoncloud/actions/slack-deployment-status@v3
      id: slack-deploy-status-started
      if: inputs.slackChannel != '' && inputs.slackBotToken != ''
      with:
        status: started
        slackChannel: ${{ inputs.slackChannel }}
        appName: ${{ inputs.appName }}
        revision: ${{ inputs.revision }}
        revisionUrl: ${{ inputs.revisionUrl }}
        reason: ${{ inputs.reason }}
        environment: ${{ inputs.environment }}
        environmentUrl: ${{ inputs.environmentUrl }}
        slackBotToken: ${{ inputs.slackBotToken }}

    - name: Jira deployment status (started)
      uses: cartoncloud/actions/jira-deployment-status@v3
      with:
        status: started
        appName: ${{ inputs.appName }}
        revision: ${{ inputs.revision }}
        environment: ${{ inputs.environment }}
        jiraServer: ${{ inputs.jiraServer }}
        jiraUsername: ${{ inputs.jiraUsername }}
        jiraPassword: ${{ inputs.jiraPassword }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ inputs.roleToAssumeForEcr }}
        aws-region: ${{ inputs.awsRegion }}

    - name: Docker login
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Check if environment tag already exists
      id: deploy-check
      shell: bash
      run: |
        image_meta=$( aws ecr describe-images --region us-west-2 --repository-name ${{ inputs.appName }} --image-ids imageTag=${{ inputs.existingImageTag }} )
        echo "existing=$(echo ${image_meta} | jq -c '.imageDetails[0] | select(.imageTags[] | contains("${{ inputs.environmentTag }}"))')" >> $GITHUB_OUTPUT

    - name: Tag image with environment tag
      if: ${{ steps.deploy-check.outputs.existing == '' }}
      shell: bash
      run: |
        manifest=$(aws ecr batch-get-image --region us-west-2 --repository-name ${{ inputs.appName }} --image-ids imageTag=${{ inputs.existingImageTag }} --output json | jq --raw-output --join-output '.images[0].imageManifest')
        aws ecr put-image --region us-west-2 --repository-name ${{ inputs.appName }} --image-tag ${{ inputs.environmentTag }} --image-manifest "$manifest"

    - name: Tag image with version tag
      id: version-tag
      if: ${{ inputs.versionTag != '' }}
      shell: bash
      run: |
        manifest=$(aws ecr batch-get-image --region us-west-2 --repository-name ${{ inputs.appName }} --image-ids imageTag=${{ inputs.existingImageTag }} --output json | jq --raw-output --join-output '.images[0].imageManifest')
        aws ecr put-image --region us-west-2 --repository-name ${{ inputs.appName }} --image-tag ${{ inputs.versionTag }} --image-manifest "$manifest"
        echo "restart=true" >> $GITHUB_OUTPUT

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ inputs.roleToAssumeForCluster }}
        aws-region: ${{ inputs.awsRegion }}

    - name: Deploy to ECS
      if: ${{ steps.deploy-check.outputs.existing == '' }} || ${{ steps.version-tag.outputs.restart == 'true' }}
      shell: bash
      env:
        CLUSTER_NAME: ${{ inputs.clusterName || format('services-{0}', inputs.environmentTag) }}
      run: |
        aws ecs update-service --cluster $CLUSTER_NAME --service ${{ inputs.appName }} --force-new-deployment
        # wait for success
        # based on https://github.com/silinternational/ecs-deploy/ however their action doesn't use session credentials and builds a new docker each run
        SERVICE=${{ inputs.appName }}
        TIMEOUT="20 minute"
        END_TIME=$(date -ud "$TIMEOUT" +%s)
        DEPLOYMENT_SUCCESS="false"
        WAIT_SECONDS=15
        echo "Waiting for service deployment to complete..."
        while [[ $(date -u +%s) -le $END_TIME ]]
        do
          NUM_DEPLOYMENTS=$(aws ecs describe-services --services $SERVICE --cluster $CLUSTER_NAME | jq "[.services[].deployments[]] | length")
          # Wait until 1 deployment stays running
          # If the wait time has passed, we need to give up
          if [ $NUM_DEPLOYMENTS -eq 1 ]; then
            echo "Service deployment successful."
            DEPLOYMENT_SUCCESS="true"
            break
          else
            echo "NUM_DEPLOYMENTS=$NUM_DEPLOYMENTS"
            sleep $WAIT_SECONDS
          fi
        done
        if [[ "${DEPLOYMENT_SUCCESS}" != "true" ]]; then
          exit 1
        fi

    - name: Slack deployment status (success)
      uses: cartoncloud/actions/slack-deployment-status@v3
      if: inputs.slackChannel != '' && inputs.slackBotToken != ''
      with:
        status: success
        slackChannel: ${{ inputs.slackChannel }}
        appName: ${{ inputs.appName }}
        revision: ${{ inputs.revision }}
        revisionUrl: ${{ inputs.revisionUrl }}
        reason: ${{ inputs.reason }}
        environment: ${{ inputs.environment }}
        environmentUrl: ${{ inputs.environmentUrl }}
        slackBotToken: ${{ inputs.slackBotToken }}
        slackUpdateTimestamp: ${{ steps.slack-deploy-status-started.outputs.slackMessageTimestamp }}

    - name: Jira deployment status (success)
      uses: cartoncloud/actions/jira-deployment-status@v3
      with:
        status: success
        appName: ${{ inputs.appName }}
        revision: ${{ inputs.revision }}
        environment: ${{ inputs.environment }}
        jiraServer: ${{ inputs.jiraServer }}
        jiraUsername: ${{ inputs.jiraUsername }}
        jiraPassword: ${{ inputs.jiraPassword }}

# api-functional-tests only has resources for qa0[123],staging01,test01.  This trigger shouldn't really
# need to know anything about the targets, but this check saves invoking against prod and environments that
# we know won't work
    - name: On success notify okay to test
      shell: bash
      if: ${{ inputs.environment == 'test01' || inputs.environment == 'staging01' }}
      run: gh workflow run run-tests.yml --repo cartoncloud/api-functional-tests --ref main --field environment=${{ inputs.environment }}
      env:
        GITHUB_TOKEN: ${{ inputs.gitHubPAT }}

    - name: Slack deployment status (failed)
      uses: cartoncloud/actions/slack-deployment-status@v3
      if: ${{ failure() && inputs.slackChannel != '' && inputs.slackBotToken != '' }}
      with:
        status: failed
        slackChannel: ${{ inputs.slackChannel }}
        appName: ${{ inputs.appName }}
        revision: ${{ inputs.revision }}
        revisionUrl: ${{ inputs.revisionUrl }}
        reason: ${{ inputs.reason }}
        environment: ${{ inputs.environment }}
        environmentUrl: ${{ inputs.environmentUrl }}
        slackBotToken: ${{ inputs.slackBotToken }}
        slackUpdateTimestamp: ${{ steps.slack-deploy-status-started.outputs.slackMessageTimestamp }}

    - name: Jira deployment status (failed)
      uses: cartoncloud/actions/jira-deployment-status@v3
      if: ${{ failure() }}
      with:
        status: failed
        appName: ${{ inputs.appName }}
        revision: ${{ inputs.revision }}
        environment: ${{ inputs.environment }}
        jiraServer: ${{ inputs.jiraServer }}
        jiraUsername: ${{ inputs.jiraUsername }}
        jiraPassword: ${{ inputs.jiraPassword }}
