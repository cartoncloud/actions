name: Java Release Pull Request
on:
  workflow_call:
    inputs:
      appName:
        type: string
        required: true
      githubEventAction: # TODO: Remove
        type: string
        required: false
      prBaseSha: # TODO: Remove
        type: string
        required: false
      prHeadSha: # TODO: Remove
        type: string
        required: false
      prNumber: # TODO: Remove
        type: string
        required: false
      prHeadRef: # TODO: Remove
        type: string
        required: false
      prUrl: # TODO: Remove
        type: string
        required: false
      repositoryUrl: # TODO: Remove
        type: string
        required: false
      repositoryName: # TODO: Remove
        type: string
        required: false
      prMerged: # TODO: Remove
        type: boolean
        required: false
      initialVersion:
        type: string
        required: false
      jasperBuild:
        type: boolean
        required: false

jobs:
  determine-version:
    name: Determine Version
    runs-on: ubuntu-latest
    if: ${{ github.event.action != 'closed' }}

    outputs:
      version: ${{ steps.increment-version.outputs.new_tag }}
      draftVersion: ${{ steps.increment-version.outputs.new_tag }}-${{ steps.sha.outputs.short-sha }}
      pomVersion: ${{ steps.pom-version.outputs.pom-version }}
      markdownReleaseNotes: ${{ steps.release-notes-markdown.outputs.releaseNotes }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'

      - name: Validate branch
        if: github.event.pull_request.head.ref == 'main'
        run: |
          gh pr close $PR --comment "$COMMENT"
          exit 1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR: ${{ github.event.pull_request.number }}
          COMMENT: "Please wait for the next daily release or run the **Cut Release** workflow. If this is a hotfix, please point your hotfix branch to `production`."

      - name: Get JIRA issues from commits
        id: jira-issues-from-commits
        uses: cartoncloud/actions/jira-issues-from-commits@v3
        with:
          jiraServer: ${{ vars.JIRA_SERVER }}
          jiraUsername: ${{ secrets.JIRA_USERNAME }}
          jiraPassword: ${{ secrets.JIRA_PASSWORD }}
          jiraProjectKeys: ${{ vars.JIRA_CARTONCLOUD_PROJECT_KEY }}
          refFrom: ${{ github.event.pull_request.base.sha  }}
          refTo: ${{ github.event.pull_request.head.sha  }}

      - name: Get incremented version
        uses: anothrNick/github-tag-action@1.62.0
        id: increment-version
        env:
          WITH_V: true
          DRY_RUN: true
          RELEASE_BRANCHES: .*
          DEFAULT_BUMP: ${{ steps.jira-issues-from-commits.outputs.suggestedVersionBump }}
          VERBOSE: false
          INITIAL_VERSION: ${{ inputs.initialVersion }}

      - name: Get pom version
        id: pom-version
        run: echo "pom-version=$(echo ${{ steps.increment-version.outputs.new_tag }} | sed 's/v//')" >> $GITHUB_OUTPUT

      - name: Get short SHA
        id: sha
        run: echo "short-sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Generate Markdown release notes
        id: release-notes-markdown
        uses: cartoncloud/actions/jira-release-notes-markdown@v3
        with:
          title: 'Release ${{ steps.increment-version.outputs.new_tag }}-${{ steps.sha.outputs.short-sha }} (#${{ github.event.pull_request.number }})'

      - name: Update pull request description (main release)
        if: ${{ github.event.pull_request.head.ref == 'release/production' }}
        run: |
          gh pr edit $PR --body "$BODY
          ---
          [Steps to release](https://cartoncloud.atlassian.net/wiki/x/LwCgB)"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR: ${{ github.event.pull_request.number }}
          BODY: ${{ steps.release-notes-markdown.outputs.releaseNotes }}

      - name: Update pull request description (hotfix)
        if: ${{ github.event.pull_request.head.ref != 'release/production' }}
        run: |
          gh pr edit $PR --body "$BODY
          ---
          [Steps to release this hotfix](https://cartoncloud.atlassian.net/wiki/x/cQCgB)"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR: ${{ github.event.pull_request.number }}
          BODY: ${{ steps.release-notes-markdown.outputs.releaseNotes }}

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: determine-version
    permissions:
      id-token: write
      contents: read
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        # Docker Hub image
        image: redis
        ports:
          # Maps port 6379 on service container to the host
          - 6379:6379
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:6.8.23
        env:
          discovery.type: single-node
        options: >-
          --health-cmd "curl http://localhost:9200/_cluster/health"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
          # Maps port 9200 on service container to the host
          - 9200:9200
    steps:
      - name: Add hosts to /etc/hosts
        run: sudo echo "127.0.0.1 postgres.localhost.com" | sudo tee -a /etc/hosts

      - name: Build
        uses: cartoncloud/actions/build-java@v3
        with:
          appName: ${{ inputs.appName }}
          pomVersion: ${{ needs.determine-version.outputs.pomVersion }}
          versionTag: ${{ needs.determine-version.outputs.draftVersion }}
          dockerTag: ${{ github.event.pull_request.head.sha  }}
          mavenS3AccessKeyId: ${{ secrets.TEMP_MAVEN_S3_ACCESS_KEY_ID }}
          mavenS3SecretAccessKey: ${{ secrets.TEMP_MAVEN_S3_SECRET_ACCESS_KEY }}
          sonarUrl: ${{ secrets.SONAR_HOST_URL }}
          sonarToken: ${{ secrets.SONAR_TOKEN }}
          jasperBuild: ${{ inputs.jasperBuild }}
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

  create-draft-release:
    name: Create Draft Release
    runs-on: ubuntu-latest
    needs: [determine-version, build]

    outputs:
      releaseId: ${{ steps.github-release.outputs.id }}
      htmlUrl: ${{ steps.github-release.outputs.html_url }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'

      - name: Delete past draft releases
        uses: cartoncloud/actions/github-delete-draft-releases@v3
        with:
          name: ${{ github.event.pull_request.head.ref }}

      - name: Create release
        id: github-release
        uses: ncipollo/release-action@v1
        with:
          name: ${{ github.event.pull_request.head.ref }}
          body: ${{ needs.determine-version.outputs.markdownReleaseNotes }}
          draft: true
          tag: ${{ needs.determine-version.outputs.draftVersion }}

  deploy-test:
    name: Deploy to Test 01
    runs-on: ubuntu-latest
    needs: [ determine-version, build, create-draft-release ]
    if: ${{ github.event.pull_request.head.ref == 'release/production' }}
    concurrency: deploy-Test 01

    environment:
      name: test01
      url: http://app.test01/

    env:
      environmentName: test01
      environmentTag: test01
      environmentUrl: http://app.test01/

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Deploy
        uses: cartoncloud/actions/deploy-java@v3
        with:
          appName: ${{ inputs.appName }}
          slackChannel: ${{ vars.DEPLOY_SLACK_CHANNEL_ID }}
          revision: ${{ needs.determine-version.outputs.draftVersion }}
          revisionUrl: ${{ needs.create-draft-release.outputs.htmlUrl }}
          reason: ':zap: <${{ github.event.repository.html_url }}|Next Release>'
          environment: ${{ env.environmentName }}
          environmentUrl: ${{ env.environmentUrl }}
          environmentTag: ${{ env.environmentTag }}
          existingImageTag: ${{ github.event.pull_request.head.sha  }}
          awsRegion: ${{ vars.AWS_REGION }}
          slackBotToken: ${{ secrets.SLACK_BOT_TOKEN }}
          jiraServer: ${{ vars.JIRA_SERVER }}
          jiraUsername: ${{ secrets.JIRA_USERNAME }}
          jiraPassword: ${{ secrets.JIRA_PASSWORD }}
          gitHubPAT: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [determine-version, build, create-draft-release]
    if: github.event.pull_request.head.ref == 'release/production' && contains(github.event.pull_request.labels.*.name, 'API Functional Pass') == true && contains(github.event.pull_request.labels.*.name, 'End-to-end Pass') == true
    concurrency: deploy-staging01

    environment:
      name: staging01
      url: http://app.staging01/

    env:
      environmentName: staging01
      environmentTag: staging01
      environmentUrl: http://app.staging01/

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Deploy
        uses: cartoncloud/actions/deploy-java@v3
        with:
          appName: ${{ inputs.appName }}
          revision: ${{ needs.determine-version.outputs.draftVersion }}
          revisionUrl: ${{ needs.create-draft-release.outputs.htmlUrl }}
          environment: ${{ env.environmentName }}
          environmentUrl: ${{ env.environmentUrl }}
          environmentTag: ${{ env.environmentTag }}
          existingImageTag: ${{ github.event.pull_request.head.sha  }}
          awsRegion: ${{ vars.AWS_REGION }}
          slackBotToken: ${{ secrets.SLACK_BOT_TOKEN }}
          jiraServer: ${{ vars.JIRA_SERVER }}
          jiraUsername: ${{ secrets.JIRA_USERNAME }}
          jiraPassword: ${{ secrets.JIRA_PASSWORD }}
          gitHubPAT: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

  create-releases:
    name: Create Releases
    runs-on: ubuntu-latest
    if: ${{ github.event.action == 'closed' && github.event.pull_request.merged == true }}
    concurrency: create-prod-releases

    outputs:
      version: ${{ steps.increment-version.outputs.new_tag }}
      slackReleaseNotes: ${{ steps.release-notes-slack.outputs.releaseNotes }}
      releaseUrl: ${{ steps.create-release.outputs.html_url }}
      jiraReleaseId: ${{ steps.create-jira-release.outputs.releaseId }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'

      - name: Get draft release
        id: draft-release
        uses: cartoncloud/actions/github-release-find-by-name@v3
        with:
          name: ${{ github.event.pull_request.head.ref }}

      - name: Get JIRA issues from commits
        id: jira-issues-from-commits
        uses: cartoncloud/actions/jira-issues-from-commits@v3
        with:
          jiraServer: ${{ vars.JIRA_SERVER }}
          jiraUsername: ${{ secrets.JIRA_USERNAME }}
          jiraPassword: ${{ secrets.JIRA_PASSWORD }}
          jiraProjectKeys: ${{ vars.JIRA_CARTONCLOUD_PROJECT_KEY }}
          refFrom: ${{ github.event.pull_request.base.sha  }}
          refTo: ${{ github.event.pull_request.head.sha  }}

      - name: Get version and tag
        uses: anothrNick/github-tag-action@1.62.0
        id: increment-version
        env:
          WITH_V: true
          DRY_RUN: false
          RELEASE_BRANCHES: .*
          DEFAULT_BUMP: ${{ steps.jira-issues-from-commits.outputs.suggestedVersionBump }}
          VERBOSE: false
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          INITIAL_VERSION: ${{ inputs.initialVersion }}

      - name: Generate Markdown release notes
        id: release-notes-markdown
        uses: cartoncloud/actions/jira-release-notes-markdown@v3

      - name: Generate Slack release notes
        id: release-notes-slack
        uses: cartoncloud/actions/jira-release-notes-slack@v3
        with:
          title: ${{ inputs.appName }} ${{ steps.increment-version.outputs.new_tag }}
          slackToken: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Create release
        uses: ncipollo/release-action@v1
        id: create-release
        with:
          name: ${{ steps.increment-version.outputs.new_tag }}
          body: ${{ steps.release-notes-markdown.outputs.releaseNotes }}
          tag: ${{ steps.increment-version.outputs.new_tag }}

      - name: Delete draft release
        uses: cartoncloud/actions/github-delete-draft-releases@v3
        with:
          name: ${{ github.event.pull_request.head.ref }}

      - name: Create JIRA Release
        id: create-jira-release
        uses: cartoncloud/actions/jira-project-version-create@v3
        with:
          username: ${{ secrets.JIRA_USERNAME }}
          password: ${{ secrets.JIRA_PASSWORD }}
          serverAddress: ${{ vars.JIRA_SERVER }}
          projectId: ${{ vars.JIRA_CARTONCLOUD_PROJECT_ID }}
          name: ${{ inputs.appName }} ${{ steps.increment-version.outputs.new_tag }}
          description: ${{ inputs.appName }} ${{ steps.increment-version.outputs.new_tag }}
          isReleased: false

      - name: Update JIRA fix versions
        uses: cartoncloud/actions/jira-issues-update-fix-version@v3
        with:
          jiraServer: ${{ vars.JIRA_SERVER }}
          jiraUsername: ${{ secrets.JIRA_USERNAME }}
          jiraPassword: ${{ secrets.JIRA_PASSWORD }}
          jiraReleaseId: ${{ steps.create-jira-release.outputs.releaseId }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: create-releases
    concurrency: deploy-Production

    environment:
      name: prod
      url: https://app.cartoncloud.com.au/

    env:
      environmentName: prod
      environmentUrl: https://app.cartoncloud.com.au/

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Deploy
        uses: cartoncloud/actions/deploy-java@v3
        with:
          appName: ${{ inputs.appName }}
          revision: ${{ needs.create-releases.outputs.version }}
          revisionUrl: ${{ needs.create-releases.outputs.releaseUrl }}
          releaseNotes: ${{ needs.create-releases.outputs.slackReleaseNotes }}
          slackChannel: ${{ vars.DEPLOY_SLACK_CHANNEL_ID }}
          environment: ${{ env.environmentName }}
          environmentUrl: ${{ env.environmentUrl }}
          environmentTag: ${{ vars.DOCKER_ENVIRONMENT_TAG }}
          versionTag: ${{ needs.create-releases.outputs.version }}
          existingImageTag: ${{ github.event.pull_request.head.sha  }}
          awsRegion: ${{ vars.AWS_REGION }}
          slackBotToken: ${{ secrets.SLACK_BOT_TOKEN }}
          jiraServer: ${{ vars.JIRA_SERVER }}
          jiraUsername: ${{ secrets.JIRA_USERNAME }}
          jiraPassword: ${{ secrets.JIRA_PASSWORD }}
          gitHubPAT: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Mark JIRA as released
        uses: cartoncloud/actions/jira-project-version-update@v3
        with:
          username: ${{ secrets.JIRA_USERNAME }}
          password: ${{ secrets.JIRA_PASSWORD }}
          serverAddress: ${{ vars.JIRA_SERVER }}
          projectId: ${{ vars.JIRA_CARTONCLOUD_PROJECT_ID }}
          releaseId: ${{ needs.create-releases.outputs.jiraReleaseId }}
          isReleased: true

  back-merge:
    name: Back-merge
    runs-on: ubuntu-latest
    needs: deploy-production

    env:
      PIPELINES_CHANNEL: C02P64WUT2T

    steps:
      - name: Merge production into main
        uses: devmasx/merge-branch@8b86512c768bec19827894f0a39a776809668189
        id: back-merge-production
        with:
          type: now
          from_branch: production
          target_branch: main
          message: Back-merge from production
          github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }} # Used to bypass required PRs

      - name: Merge conflict Slack notification
        if: ${{ failure() && steps.back-merge-production.conclusion == 'failure' }}
        uses: slackapi/slack-github-action@v1.23.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          channel-id: ${{ env.PIPELINES_CHANNEL }}
          payload: |
            {
              "text": "${{ github.event.repository.name }} has merge conflicts",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*⚠️ <${{ github.event.repository.html_url }}|${{ github.event.repository.name }}>* has merge conflicts between `production` and `main`"
                  }
                },
                {
                  "type": "context",
                  "elements": [
                    {
                      "type": "mrkdwn",
                      "text": "Please resolve *manually*"
                    }
                  ]
                }
              ]
            }
