name: Java Branch Push

on:
  workflow_call:
    inputs:
      appName:
        type: string
        required: true
      githubRefName:
        type: string
        required: false
      jasperBuild:
        type: boolean
        required: false

env:
  jiraServer: cartoncloud.atlassian.net

jobs:
  build:
    if: ${{ inputs.postgres == false }}
    name: Build
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        # Docker Hub image
        image: redis
        ports:
          # Maps port 6379 on service container to the host
          - 6379:6379
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Add hosts to /etc/hosts
        run: sudo echo "127.0.0.1 postgres.localhost.com" | sudo tee -a /etc/hosts

      - name: Build
        uses: cartoncloud/actions/build-java@v3
        with:
          appName: ${{ inputs.appName }}
          mavenS3AccessKeyId: ${{ secrets.TEMP_MAVEN_S3_ACCESS_KEY_ID }}
          mavenS3SecretAccessKey: ${{ secrets.TEMP_MAVEN_S3_SECRET_ACCESS_KEY }}
          sonarUrl: ${{ secrets.SONAR_HOST_URL }}
          sonarToken: ${{ secrets.SONAR_TOKEN }}
          githubRefName: ${{ inputs.githubRefName }}
          jasperBuild: ${{ inputs.jasperBuild }}
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

  auto-update-list:
    name: Environment Updates
    runs-on: ubuntu-latest
    needs: build

    outputs:
      environments: ${{ steps.map-issues.outputs.issues }}

    steps:
      - uses: cartoncloud/actions/jira-environment-revision-search@v3
        id: find-issues
        with:
          jiraServer: ${{ env.jiraServer }}
          jiraUsername: ${{ secrets.JIRA_USERNAME }}
          jiraPassword: ${{ secrets.JIRA_PASSWORD }}
          projectKey: ENV
          appName: ${{ inputs.appName }}
          revision: ${{ github.ref_name }}

      - id: map-issues
        run: echo "::set-output name=issues::$(echo '${{ steps.find-issues.outputs.issues }}' | jq -c '[.[] | .["name"] = .fields.customfield_10224 | .["url"] = .fields.customfield_10225] | map({name, url})')"

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build, auto-update-list]
    if: needs.auto-update-list.outputs.environments != '[]'

    permissions:
      id-token: write
      contents: read

    strategy:
      fail-fast: false
      matrix:
        environment: ${{ fromJSON(needs.auto-update-list.outputs.environments) }}

    concurrency: deploy-${{ matrix.environment.name }}
    environment:
      name: ${{ matrix.environment.name }}
      url: ${{ matrix.environment.url }}

    steps:
      - name: Deploy
        uses: cartoncloud/actions/deploy-java@v3
        with:
          appName: ${{ inputs.appName }}
          revision: ${{ github.ref_name }}
          revisionUrl: ${{ github.event.repository.html_url }}/tree/${{ github.ref_name }}
          environment: ${{ matrix.environment.name }}
          environmentUrl: ${{ matrix.environment.url }}
          environmentTag: ${{ secrets.DOCKER_ENVIRONMENT_TAG }}
          existingImageTag: ${{ github.sha }}
          awsRegion: ${{ secrets.CODEDEPLOY_REGION }}
          jiraServer: ${{ env.jiraServer }}
          jiraUsername: ${{ secrets.JIRA_USERNAME }}
          jiraPassword: ${{ secrets.JIRA_PASSWORD }}
